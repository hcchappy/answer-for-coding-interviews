using System;
using System.Collections.Generic;
using System.Text;

/*
 * 数组中的逆序对

题目描述

在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。
输入一个数组,求出这个数组中的逆序对的总数P。
并将P对1000000007取模的结果输出。 即输出P%1000000007

输入描述:
题目保证输入的数组中没有的相同的数字

数据范围：

	对于%50的数据,size<=10^4

	对于%75的数据,size<=10^5

	对于%100的数据,size<=2*10^5

示例1

输入
1,2,3,4,5,6,7,0

输出
7
*/

namespace nowcoder {
    namespace InversePairs {
        class Solution {
            // this solution referenced answer of Aurora1 on page
            //  https://www.nowcoder.com/questionTerminal/96bd6684e04a44eb80e6a68efc0ec6c5?f=discussion
            const int Bottom = 1000000007;
            public int InversePairs(int[] data) {
                var len = data.Length;

                // reinitial variables for this `data`
                count = 0;
                if (temp == null || temp.Length < len) {
                    temp = new int[len];
                }

                MergeSort(data, 0, len - 1);

                var result = (int)(count % Bottom);
                return result;
            }

            long count = 0;
            int[] temp = null;
            void MergeSort(int[] array, int first, int last) {
                if (first >= last) {
                    return;
                }

                int mid = (first + last) >> 1;
                MergeSort(array, first, mid);
                MergeSort(array, mid + 1, last);

                Merge(array, first, mid, last);
            }

            void Merge(int[] array, int first, int mid, int last) {
                var length = last - first + 1;
                var i = first;
                var j = mid + 1;
                var k = 0;
                while (i <= mid && j <= last) {
                    if(array[i] <= array[j]) {
                        temp[k] = array[i];
                        i++;
                    } else {
                        temp[k] = array[j];

                        // there are (mid - i + 1) elements larger than array[j]
                        // thus, formed this many inverse pairs
                        count += mid - i + 1;

                        j++;
                    }

                    k++;
                }

                while (i <= mid) {
                    temp[k] = array[i];
                    i++;
                    k++;
                }

                while (j <= last) {
                    temp[k] = array[j];
                    j++;
                    k++;
                }

                for (k = 0; k < length; ++k) {
                    array[first + k] = temp[k];
                }
            }

            #region InversePairsInsert
            /// <summary>
            /// This method also produce right answer, but exceed time limit.
            /// </summary>
            /// <param name="data"></param>
            /// <returns></returns>
            public int InversePairsInsert(int[] data) {
                var len = data.Length;
                var count = 0;
                var list = new System.Collections.Generic.List<int>();
                for (var i = len - 1; i >= 0; --i) {
                    var value = data[i];
                    var processed = list.Count;
                    var pos = Insert(list, value, 0, processed);
                    var smallerCount = pos;

                    count += smallerCount;
                    if (count > Bottom) {
                        count = count % Bottom;
                    }
                }

                var result = count % Bottom;
                return result;
            }

            int Insert(System.Collections.Generic.List<int> list, int value, int start, int end) {
                if (list.Count == 0) {
                    list.Insert(0, value);
                    return 0;
                }

                var first = list[start];
                if (value < first) {
                    list.Insert(start, value);
                    return start;
                }

                var last = list[end - 1];
                if (value > last) {
                    list.Insert(end, value);
                    return end;
                }

                var mid = start + (end - start) / 2;
                var midV = list[mid];
                var midLeftV = list[mid - 1];
                if (value > midLeftV && midV >= value) {
                    list.Insert(mid, value);
                    return mid;
                }

                if (midV < value) {
                    return Insert(list, value, mid + 1, end);
                }
                return Insert(list, value, start, mid - 1);
            }
            #endregion

            #region InversePairsInsertArray
            /// <summary>
            /// This is a improved of InversePairsInsert
            /// </summary>
            /// <param name="data"></param>
            /// <returns></returns>
            public int InversePairsInsertArray(int[] data) {
                var len = data.Length;
                var count = 0;
                var array = new int[len];
                var processed = 0;
                for (var i = len - 1; i >= 0; --i) {
                    var value = data[i];
                    var pos = InsertArray(array, processed, value, 0, processed);
                    processed += 1;
                    var smallerCount = pos;

                    count += smallerCount;
                    if (count > Bottom) {
                        count = count % Bottom;
                    }
                }

                var result = count % Bottom;
                return result;
            }


            void ArrayInsert(int[] array, int value, int pos, int curLength) {
                System.Array.Copy(array, pos, array, pos + 1, curLength - pos);
                array[pos] = value;
            }

            int InsertArray(int[] array, int curLength, int value, int start, int end) {
                if (curLength == 0) {
                    array[0] = value;
                    return 0;
                }

                var first = array[start];
                if (value < first) {
                    ArrayInsert(array, value, start, curLength);
                    return start;
                }

                var last = array[end - 1];
                if (value > last) {
                    ArrayInsert(array, value, end, curLength);
                    return end;
                }

                var mid = start + ((end - start) >> 1);
                var midV = array[mid];
                var midLeftV = array[mid - 1];
                if (value > midLeftV && midV >= value) {
                    ArrayInsert(array, value, mid, curLength);
                    return mid;
                }

                if (value > midV) {
                    return InsertArray(array, curLength, value, mid + 1, end);
                }

                return InsertArray(array, curLength, value, start, mid - 1);
            }
            #endregion

            #region answer from nowcoder
            /// <summary>
            /// this is answer from Aurora1 on page
            ///     https://www.nowcoder.com/questionTerminal/96bd6684e04a44eb80e6a68efc0ec6c5?f=discussion
            /// </summary>
            /// 

            public int Aurora1InversePairs(int[] array) {
                cnt = 0;
                if (array != null)
                    mergeSortUp2Down(array, 0, array.Length - 1);
                return cnt;
            }

            int cnt;

            /*
             * 归并排序(从上往下)
             */
            public void mergeSortUp2Down(int[] a, int start, int end) {
                if (start >= end)
                    return;
                int mid = (start + end) >> 1;

                mergeSortUp2Down(a, start, mid);
                mergeSortUp2Down(a, mid + 1, end);

                merge(a, start, mid, end);
            }

            /*
             * 将一个数组中的两个相邻有序区间合并成一个
             */
            public void merge(int[] a, int start, int mid, int end) {
                int[] tmp = new int[end - start + 1];

                int i = start, j = mid + 1, k = 0;
                while (i <= mid && j <= end) {
                    if (a[i] <= a[j])
                        tmp[k++] = a[i++];
                    else {
                        tmp[k++] = a[j++];
                        cnt += mid - i + 1;  // core code, calculate InversePairs............
                    }
                }

                while (i <= mid)
                    tmp[k++] = a[i++];
                while (j <= end)
                    tmp[k++] = a[j++];
                for (k = 0; k < tmp.Length; k++)
                    a[start + k] = tmp[k];
            }
            #endregion

            public static void Test() {
                //TestCase(new int[] { 364, 637, 341, 406, 747, 995, 234, 971, 571, 219, 993, 407, 416, 366, 315, 301, 601, 650, 418, 355, 460, 505, 360, 965, 516, 648, 727, 667, 465, 849, 455, 181, 486, 149, 588, 233, 144, 174, 557, 67, 746, 550, 474, 162, 268, 142, 463, 221, 882, 576, 604, 739, 288, 569, 256, 936, 275, 401, 497, 82, 935, 983, 583, 523, 697, 478, 147, 795, 380, 973, 958, 115, 773, 870, 259, 655, 446, 863, 735, 784, 3, 671, 433, 630, 425, 930, 64, 266, 235, 187, 284, 665, 874, 80, 45, 848, 38, 811, 267, 575 });
                //TestCase(new int[] { 364, 637, 341, 406, 747, 995, 234 });
                TestCase(new int[] { 627126, 415347, 850134, 371085, 279048, 705820, 453064, 944751, 92317, 58592, 167988, 284065, 992573, 78043, 190215, 104546, 607528, 391775, 701214, 849731, 231053, 603058, 975374, 199773, 479544, 143961, 206797, 325662, 90035, 69615, 429916, 717161, 484962, 796403, 604598, 280362, 502223, 57662, 741466, 594540, 632606, 909454, 394957, 625180, 503849, 585172, 729726, 627729, 976947, 947293, 477461, 724352, 66703, 452835, 440478, 62599, 596797, 163627, 388261, 203184, 233243, 334529, 436697, 234557, 647284, 41295, 514920, 665859, 615310, 256386, 776752, 247916, 682192, 171709, 389448, 186041, 273234, 635527, 813771, 766533, 582820, 807584, 490886, 649523, 260419, 447716, 228474, 373568, 611343, 616735, 576752, 844586, 467616, 529801, 595496, 631253, 571097, 110416, 297112, 186407, 883154, 73864, 950675, 81698, 245574, 340124, 267739, 35160, 975651, 597862, 801693, 74823, 921798, 292579, 240698, 182218, 256647, 469172, 72138, 867991, 602259, 165243, 228929, 69875, 695044, 824425, 701128, 782493, 451193, 998241, 485252, 334347, 588457, 435928, 416045, 350383, 292404, 200137, 385543, 268055, 314351, 187237, 859230, 236150, 996168, 99928, 934720, 252816, 569100, 523210, 120807, 171359, 688453, 866088, 757586, 383498, 206866, 458715, 682343, 658059, 973308, 167596, 508759, 78117, 603524, 441156, 428501, 412280, 157645, 814044, 196687, 471997, 1281, 55917, 224499, 997450, 155845, 159219, 250266, 241297, 682429, 887425, 412656, 887235, 269865, 686594, 787085, 476731, 661661, 469428, 134791, 634969, 637024, 643550, 229439, 756900, 601058, 657940, 169180, 758704, 471984, 365867, 230701, 473266, 421784, 455200, 470716, 93981, 130771, 237334, 335278, 329552, 641111, 264286, 733139, 910976, 950881, 520224, 904060, 612542, 989653, 38851, 763864, 143029, 198753, 993303, 899930, 799811, 651243, 585462, 558515, 639579, 951330, 305568, 112845, 889466, 277120, 99913, 499800, 924243, 853599, 835078, 770148, 11062, 615717, 503287, 922039, 82950, 23512, 826099, 695492, 529517, 381302, 975708, 672546, 96407, 485363, 88828, 896218, 652958, 674291, 971086, 292538, 141973, 276654, 921735, 547791, 70127, 21649, 47591, 994370, 391600, 399022, 764518, 402663, 14739, 267806, 841054, 97689, 807670, 183505, 309533, 337187, 564807, 801594, 9733, 661214, 803309, 614914, 73784, 456268, 805557, 44870, 265158, 947530, 837877, 703245, 11673, 908004, 241246, 59265, 418726, 632847, 974639, 183245, 35510, 505730, 967403, 392916, 603419, 775073, 576421, 429304, 112260, 141228, 747250, 638345, 318794, 550560, 769611, 392578, 523180, 575168, 953801, 304690, 39050, 308030, 7935, 50724, 216034, 249182, 626341, 151112, 882029, 600980, 334357, 433891, 106710, 818112, 826807, 226481, 593185, 919580, 172137, 221797, 60808, 919388, 376495, 895954, 986300, 146106, 804884, 509480, 237627, 275037, 814170, 276677, 583067, 338457, 327401, 315453, 587639, 953742, 466566, 986020, 71074, 317275, 936263, 694136, 135388, 763070, 920617, 728573, 682650, 92755, 466723, 259810, 528495, 843218, 672116, 514795, 505676, 477001, 24275, 259655, 752038, 354797, 536333, 335106, 693254, 380086, 166911, 797246, 850181, 633477, 783266, 921255, 950753, 719530, 615392, 86141, 998952, 52361, 331066, 197955, 661468, 797789, 974117, 189963, 157359, 646234, 704758, 179388, 639587, 245385, 439043, 907977, 116534, 491728, 759435, 809789, 871815, 926347, 123387, 721996, 559824, 423005, 159603, 510577, 142535, 774995, 113070, 657840, 343709, 444137, 372147, 5177, 758278, 346264, 195141, 915638, 508850, 416251, 611378, 664789, 661637, 50421, 572767, 294523, 58502, 332202, 620664, 930317, 258549, 744051, 652313, 818374, 167057, 811916, 845303, 825944, 103264, 474726, 483784, 446973, 918863, 855931, 968502, 677141, 718548, 163643, 109131, 743750, 96247, 720509, 408540, 274236, 287283, 981307, 568759, 862137, 313509, 189424, 792454, 88411, 933475, 961119, 423137, 616884, 773035, 268440, 442829, 392651, 743166, 442965, 839624, 178381, 815249, 324479, 371875, 533797, 488122, 481006, 793899, 100721, 717868, 202439, 374957, 521503, 183746, 943717, 383640, 13608, 133141, 692446, 618371, 582968, 653565, 41508, 716205, 942952, 826300, 159034, 335604, 85819, 118351, 691580, 780552, 933600, 16059, 152427, 983749, 20534, 149786, 777649, 121255, 384006, 980088, 496213, 421861, 680187, 956282, 321853, 210147, 605775, 14299, 828518, 188743, 667864, 386378, 904948, 610816, 212678, 580334, 462772, 814849, 698686, 154353, 595402, 148638, 170412, 747829, 132388, 190946, 897615, 910037, 828554, 797973, 406477, 324767, 219834, 603016, 281049, 541687, 813163, 886824, 555986, 158033, 591919, 740202, 60763, 13220, 867371, 789794, 109906, 330143, 604643, 324944, 484496, 200045, 473583, 171261, 464227, 605971, 878559, 878194, 32360, 707113, 676168, 438837, 31880, 896002, 41854, 829281, 954042, 371369, 232457, 510028, 45755, 340729, 766583, 106518, 353949, 633954, 896312, 463855, 964097, 17308, 788800, 448594, 733705, 262383, 619855, 714284, 384706, 498414, 592479, 417066, 721880, 784999, 855903, 753760, 197353, 414109, 99394, 151395, 301831, 848203, 177776, 347586, 188932, 944359, 970456, 542881, 578313, 383121, 523089, 58762, 400429, 828241, 507356, 134134, 606976, 643563, 848419, 991682, 658330, 957250, 408748, 380210, 258601, 781003, 650322, 455954, 195113, 266068, 123702, 13296, 114272, 301478, 360882, 303204, 762189, 331338, 846086, 856854, 714459, 885527, 915616, 631240, 713768, 939325, 281727, 837096, 99240, 646498, 828778, 757570, 603748, 753878, 654132, 862349, 534881, 304455, 834655, 246346, 86875, 958357, 259642, 201147, 776187, 136876, 504352, 538376, 984567, 866790, 911582, 699026, 268669, 343551, 846619, 982437, 282876, 128346, 819533, 382116, 774844, 164663, 656039, 894944, 918541, 826523, 273645, 969774, 647330, 108300, 732473, 734206, 66658, 508467, 935353, 359197, 161696, 956057, 413926, 146263, 339199, 325508, 361641, 607868, 669059, 208260, 106657, 468287, 336606, 442542, 366756, 627802, 607205, 539147, 522746, 42098, 365670, 796391, 528225, 13001, 421044, 777050, 747207, 4054, 285517, 198912, 363251, 447213, 154970, 777177, 593476, 494169, 619038, 471470, 102038, 804449, 679730, 208695, 272737, 532689, 651238, 160491, 774795, 694992, 199590, 333246, 60662, 512333, 861471, 590015, 933377, 638521, 337222, 937431, 440390, 536135, 300683, 887604, 691105, 594212, 997432, 701626, 213250, 468902, 320016, 17700, 664985, 528712, 806789, 197674, 696302, 962634, 874517, 987449, 173978, 74107, 320695, 234640, 102793, 182166, 824656, 36170, 337039, 678230, 489954, 777430, 214365, 790637, 181386, 421822, 901201, 178818, 639801, 114452, 164073, 959817, 648504, 829058, 4881, 971645, 543084, 217535, 934279, 417601, 204985, 108257, 8061, 525680, 859249, 110854, 224199, 200257, 663376, 561238, 878488, 153330, 855020, 609205, 460319, 36406, 547380, 361521, 731577, 187181, 992325, 895650, 146998, 157181, 241060, 668232, 128826, 784144, 885767, 579457, 718097, 90752, 687714, 726158, 132785, 63315, 353364, 873336, 263573, 533093, 950926, 142061, 686423, 805947, 267618, 663095, 842353, 814998, 540968, 573930, 518531, 49645, 985932, 665530, 206826, 226992, 850114, 852004, 527488, 735881, 431461, 245586, 342986, 488096, 475771, 698842, 357813, 349107, 962415, 890906, 300033, 620828, 93681, 622332, 404799, 273128, 464686, 219797, 814096, 554968, 738329, 863741, 540901, 920211, 586919, 284245, 770325, 438923, 811734, 22558, 870384, 573672, 365544, 505911, 578120, 841315, 721106, 935933, 706774, 683521, 343191, 523160, 820702, 436873, 145492, 225501, 710001, 126530, 961650, 40450, 681499, 216331, 904191, 738752, 136542, 7463, 22997, 423219, 446386, 834731, 445778, 833123, 924755, 811322, 339034, 502876, 168990, 576492, 438809, 392116, 260014, 782001, 431628, 597068, 735226, 93473, 338921, 445227, 220003, 300571, 2029, 417854, 516903, 906221, 156606, 169797, 430036, 179604, 593017, 876422, 530687, 38795, 709545, 455443, 366469, 564932, 958319, 535459, 141424, 913480, 443928, 917790, 211833, 875556, 31210, 947059, 969029, 886483, 908639, 705385, 187055, 910668, 123239, 220310, 333241, 796198, 906459, 763277, 492154, 15828, 156052, 22841, 570975, 381949, 994636, 937445, 463233, 469307, 989256, 121010, 899140, 433184, 555152, 110973, 308741, 586363, 58033, 794122, 472846 });

                //TestCase(new int[] { 1281,2029,4054,4881,5177,7463,7935,8061,9733,11062,11673,13001,13220,13296,13608,14299,14739,15828,16059,17308,17700,20534,21649,22558,22841,22997,23512,24275,31210,31880,32360,35160,35510,36170,36406,38795,38851,39050,40450,41295,41508,41854,42098,44870,45755,47591,49645,50421,50724,52361,55917,57662,58033,58502,58592,58762,59265,60662,60763,60808,62599,63315,66658,66703,69615,69875,70127,71074,72138,73784,73864,74107,74823,78043,78117,81698,82950,85819,86141,86875,88411,88828,90035,90752,92317,92755,93473,93681,93981,96247,96407,97689,99240,99394,99913,99928,100721,102038,102793,103264,104546,106518,106657,106710,108257,108300,109131,109906,110416,110854,110973,112260,112845,113070,114272,114452,116534,118351,120807,121010,121255,123239,123387,123702,126530,128346,128826,130771,132388,132785,133141,134134,134791,135388,136542,136876,141228,141424,141973,142061,142535,143029,143961,145492,146106,146263,146998,148638,149786,151112,151395,152427,153330,154353,154970,155845,156052,156606,157181,157359,157645,158033,159034,159219,159603,160491,161696,163627,163643,164073,164663,165243,166911,167057,167596,167988,168990,169180,169797,170412,171261,171359,171709,172137,173978,177776,178381,178818,179388,179604,181386,182166,182218,183245,183505,183746,186041,186407,187055,187181,187237,188743,188932,189424,189963,190215,190946,195113,195141,196687,197353,197674,197955,198753,198912,199590,199773,200045,200137,200257,201147,202439,203184,204985,206797,206826,206866,208260,208695,210147,211833,212678,213250,214365,216034,216331,217535,219797,219834,220003,220310,221797,224199,224499,225501,226481,226992,228474,228929,229439,230701,231053,232457,233243,234557,234640,236150,237334,237627,240698,241060,241246,241297,245385,245574,245586,246346,247916,249182,250266,252816,256386,256647,258549,258601,259642,259655,259810,260014,260419,262383,263573,264286,265158,266068,267618,267739,267806,268055,268440,268669,269865,272737,273128,273234,273645,274236,275037,276654,276677,277120,279048,280362,281049,281727,282876,284065,284245,285517,287283,292404,292538,292579,294523,297112,300033,300571,300683,301478,301831,303204,304455,304690,305568,308030,308741,309533,313509,314351,315453,317275,318794,320016,320695,321853,324479,324767,324944,325508,325662,327401,329552,330143,331066,331338,332202,333241,333246,334347,334357,334529,335106,335278,335604,336606,337039,337187,337222,338457,338921,339034,339199,340124,340729,342986,343191,343551,343709,346264,347586,349107,350383,353364,353949,354797,357813,359197,360882,361521,361641,363251,365544,365670,365867,366469,366756,371085,371369,371875,372147,373568,374957,376495,380086,380210,381302,381949,382116,383121,383498,383640,384006,384706,385543,386378,388261,389448,391600,391775,392116,392578,392651,392916,394957,399022,400429,402663,404799,406477,408540,408748,412280,412656,413926,414109,415347,416045,416251,417066,417601,417854,418726,421044,421784,421822,421861,423005,423137,423219,428501,429304,429916,430036,431461,431628,433184,433891,435928,436697,436873,438809,438837,438923,439043,440390,440478,441156,442542,442829,442965,443928,444137,445227,445778,446386,446973,447213,447716,448594,451193,452835,453064,455200,455443,455954,456268,458715,460319,462772,463233,463855,464227,464686,466566,466723,467616,468287,468902,469172,469307,469428,470716,471470,471984,471997,472846,473266,473583,474726,475771,476731,477001,477461,479544,481006,483784,484496,484962,485252,485363,488096,488122,489954,490886,491728,492154,494169,496213,498414,499800,502223,502876,503287,503849,504352,505676,505730,505911,507356,508467,508759,508850,509480,510028,510577,512333,514795,514920,516903,518531,520224,521503,522746,523089,523160,523180,523210,525680,527488,528225,528495,528712,529517,529801,530687,532689,533093,533797,534881,535459,536135,536333,538376,539147,540901,540968,541687,542881,543084,547380,547791,550560,554968,555152,555986,558515,559824,561238,564807,564932,568759,569100,570975,571097,572767,573672,573930,575168,576421,576492,576752,578120,578313,579457,580334,582820,582968,583067,585172,585462,586363,586919,587639,588457,590015,591919,592479,593017,593185,593476,594212,594540,595402,595496,596797,597068,597862,600980,601058,602259,603016,603058,603419,603524,603748,604598,604643,605775,605971,606976,607205,607528,607868,609205,610816,611343,611378,612542,614914,615310,615392,615717,616735,616884,618371,619038,619855,620664,620828,622332,625180,626341,627126,627729,627802,631240,631253,632606,632847,633477,633954,634969,635527,637024,638345,638521,639579,639587,639801,641111,643550,643563,646234,646498,647284,647330,648504,649523,650322,651238,651243,652313,652958,653565,654132,656039,657840,657940,658059,658330,661214,661468,661637,661661,663095,663376,664789,664985,665530,665859,667864,668232,669059,672116,672546,674291,676168,677141,678230,679730,680187,681499,682192,682343,682429,682650,683521,686423,686594,687714,688453,691105,691580,692446,693254,694136,694992,695044,695492,696302,698686,698842,699026,701128,701214,701626,703245,704758,705385,705820,706774,707113,709545,710001,713768,714284,714459,716205,717161,717868,718097,718548,719530,720509,721106,721880,721996,724352,726158,728573,729726,731577,732473,733139,733705,734206,735226,735881,738329,738752,740202,741466,743166,743750,744051,747207,747250,747829,752038,753760,753878,756900,757570,757586,758278,758704,759435,762189,763070,763277,763864,764518,766533,766583,769611,770148,770325,773035,774795,774844,774995,775073,776187,776752,777050,777177,777430,777649,780552,781003,782001,782493,783266,784144,784999,787085,788800,789794,790637,792454,793899,794122,796198,796391,796403,797246,797789,797973,799811,801594,801693,803309,804449,804884,805557,805947,806789,807584,807670,809789,811322,811734,811916,813163,813771,814044,814096,814170,814849,814998,815249,818112,818374,819533,820702,824425,824656,825944,826099,826300,826523,826807,828241,828518,828554,828778,829058,829281,833123,834655,834731,835078,837096,837877,839624,841054,841315,842353,843218,844586,845303,846086,846619,848203,848419,849731,850114,850134,850181,852004,853599,855020,855903,855931,856854,859230,859249,861471,862137,862349,863741,866088,866790,867371,867991,870384,871815,873336,874517,875556,876422,878194,878488,878559,882029,883154,885527,885767,886483,886824,887235,887425,887604,889466,890906,894944,895650,895954,896002,896218,896312,897615,899140,899930,901201,904060,904191,904948,906221,906459,907977,908004,908639,909454,910037,910668,910976,911582,913480,915616,915638,917790,918541,918863,919388,919580,920211,920617,921255,921735,921798,922039,924243,924755,926347,930317,933377,933475,933600,934279,934720,935353,935933,936263,937431,937445,939325,942952,943717,944359,944751,947059,947293,947530,950675,950753,950881,950926,951330,953742,953801,954042,956057,956282,957250,958319,958357,959817,961119,961650,962415,962634,964097,967403,968502,969029,969774,970456,971086,971645,973308,974117,974639,975374,975651,975708,976947,980088,981307,982437,983749,984567,985932,986020,986300,987449,989256,989653,991682,992325,992573,993303,994370,994636,996168,997432,997450,998241,998952 });


                Console.ReadKey();
            }



            static void TestCase(int[] input) {

                var arr1 = Utility.Clone(input);
                var arr2 = Utility.Clone(input);
                var arr3 = Utility.Clone(input);
                var arr4 = Utility.Clone(input);

                Utility.PrintElapse("InversePairsInsertArray", () => {
                    var obj = new Solution();
                    return obj.InversePairs(arr1);
                });
                Utility.PrintElapse("InversePairsInsert", () => {
                    var obj = new Solution();
                    return obj.InversePairsInsert(arr2);
                });
                Utility.PrintElapse("InversePairs", () => {
                    var obj = new Solution();
                    return obj.InversePairs(arr3);
                });
                Utility.PrintElapse("Aurora1InversePairs", () => {
                    var obj = new Solution();
                    return obj.Aurora1InversePairs(arr4);
                });
            }


        }
    }
}
